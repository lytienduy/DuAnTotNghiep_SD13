import React, { useState, useEffect } from 'react'; // Th√™m useEffect ·ªü ƒë√¢y
import axios from 'axios';
import {
    Box, Grid, TextField, Typography, Button, FormControlLabel, Radio, InputAdornment,
    Container, Breadcrumbs, Link, MenuItem, Select, InputLabel, FormControl, Input, Dialog,
    DialogTitle, IconButton, DialogContent, DialogActions, DialogContentText, Modal,
    TableContainer, Paper, Table, TableHead, TableCell, TableRow, TableBody
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import EditIcon from '@mui/icons-material/Edit';
import { useLocation, useSearchParams, useNavigate } from "react-router-dom";
import "react-toastify/dist/ReactToastify.css";
import { toast } from "react-toastify";
import { ToastContainer } from "react-toastify";

const PayNowImage = 'https://cdn.haitrieu.com/wp-content/uploads/2022/10/Logo-VNPAY-QR-1.png'; // PayNow image URL
const CODImage = 'https://drive.gianhangvn.com/image/thanh-toan-khi-nhan-hang-2135165j32025.jpg';


const ThanhToan = () => {
    const [showLeftPanel, setShowLeftPanel] = useState(true);
    const [discount, setDiscount] = useState(0);
    const [selectedGHNDistrict, setSelectedGHNDistrict] = useState("");
    const [selectedGHNWard, setselectedGHNWard] = useState("");
    const [bestVoucher, setBestVoucher] = useState(null);
    //Khai b√°o Th√†nh ph·ªë huy·ªán x√£
    const navigate = useNavigate();
    const [cities, setCities] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);
    const [city, setCity] = useState('');
    const [district, setDistrict] = useState('');
    const [ward, setWard] = useState('');
    const [selectedCity, setSelectedCity] = useState("");
    const [selectedDistrict, setSelectedDistrict] = useState("");
    const [selectedWard, setSelectedWard] = useState("");
    const [specificAddress, setSpecificAddress] = useState('');
    const [ghiChu, setGhiChu] = useState('');
    const [tenNguoiNhan, setTenNguoiNhan] = useState('');
    const [sdtNguoiNhan, setSdtNguoiNhan] = useState('');
    const [emailNguoiNhan, setEmailNguoiNhan] = useState('');

    //Th√™m m·ªõi ƒë·ªãa ch·ªâ
    const [newCities, setNewCities] = useState([]);
    const [newDistricts, setNewDistricts] = useState([]);
    const [newWards, setNewWards] = useState([]);
    const [newCity, setNewCity] = useState('');
    const [newDistrict, setNewDistrict] = useState('');
    const [newWard, setNewWard] = useState('');

    //khai b√°o phi·∫øu gi·∫£m gi√°
    const [openVoucherModal, setOpenVoucherModal] = useState(false);
    const [voucherCode, setVoucherCode] = useState('');
    const [vouchers, setVouchers] = useState([]);
    const [selectedVoucherCode, setSelectedVoucherCode] = useState('');
    const [discountAmount, setDiscountAmount] = useState(0);
    const [selectedCustomerId, setSelectedCustomerId] = useState(null);
    const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("COD");
    const [phiShip, setPhiShip] = useState(0);

    //Phong
    const [products, setProducts] = useState([]);
    const location = useLocation();
    const selectedProducts = location.state?.selectedProducts || []; // Tr√°nh undefined
    const tongTien = products.reduce((tong, item) => tong + item.gia * item.quantity, 0);
    const tongTienThanhToan = tongTien - discountAmount + Number(discount);
    const [openConfirmDatHang, setOpenConfirmDatHang] = useState(false);
    const userKH = JSON.parse(localStorage.getItem("userKH"));

    //Th√¥ng b√°o Toast
    const showSuccessToast = (message) => {
        toast.success(message, {
            position: "top-right",
            autoClose: 2000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            theme: "colored",
            style: {
                backgroundColor: "#1976D2", // M√†u n·ªÅn xanh ƒë·∫πp h∆°n
                color: "white", // Ch·ªØ tr·∫Øng n·ªïi b·∫≠t
                fontSize: "14px", // Nh·ªè h∆°n m·ªôt ch√∫t
                fontWeight: "500",
                borderRadius: "8px",
            }
        });
    };
    const showErrorToast = (message) => {
        toast.error(message, {
            position: "top-right",
            autoClose: 2000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            theme: "colored",
            style: {
                backgroundColor: "#D32F2F", // M√†u ƒë·ªè c·∫£nh b√°o
                color: "white", // Ch·ªØ tr·∫Øng n·ªïi b·∫≠t
                fontSize: "14px", // Nh·ªè h∆°n m·ªôt ch√∫t
                fontWeight: "500",
                borderRadius: "8px",
            }
        });
    };

    const getEstimatedDeliveryDate = () => {
        const today = new Date();
        const estimatedDate = new Date();
        estimatedDate.setDate(today.getDate() + 5); // C·ªông th√™m 5 ng√†y

        // Format v·ªÅ d·∫°ng dd/mm/yyyy
        const day = estimatedDate.getDate().toString().padStart(2, '0');
        const month = (estimatedDate.getMonth() + 1).toString().padStart(2, '0');
        const year = estimatedDate.getFullYear();

        return `${day}/${month}/${year}`;
    };

    //L·∫•y d·ªØ li·ªáu cart
    const layDuLieuCart = () => {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const filteredCart = cart.filter((_, index) => selectedProducts.includes(index));
        setProducts(filteredCart);
    };

    useEffect(() => {
        layDuLieuCart();
    }, []);

    const khiAnNutXacNhanDatHang = () => {
        if (selectedPaymentMethod === "") {
            showErrorToast("B·∫°n ch∆∞a ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n");
            return;
        }
        setOpenConfirmDatHang(true);
    }

    //H√†m l∆∞u h√≥a ƒë∆°n
    const luuHoaDon = async (maHoaDon = "") => {
        const addressParts = [specificAddress, ward, district, city]
            .filter(part => part) // L·ªçc b·ªè gi√° tr·ªã null, undefined ho·∫∑c chu·ªói r·ªóng
            .join(", "); // Gh√©p chu·ªói v·ªõi d·∫•u , c√°ch
        const response = await axios.post(`http://localhost:8080/thanhToanClient/xacNhanDatHang`, {
            maHoaDon: maHoaDon,
            pgg: selectedVoucherCode,
            tenNguoiNhan: tenNguoiNhan,
            sdtNguoiNhan: sdtNguoiNhan,
            emailNguoiNhan: emailNguoiNhan,
            diaChiNhanHang: addressParts,
            tongTienPhaiTra: tongTienThanhToan,
            phiShip: discount,
            ghiChu: ghiChu,
            danhSachThanhToan: products, //ƒë√¢y l√† m·∫£ng json
            idKhachHang: userKH?.khachHang?.id || null
        })
        if (response.data === "OK") {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            // Lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ c√≥ index n·∫±m trong selectedProducts
            const updatedCart = cart.filter((_, index) => !selectedProducts.includes(index));
            localStorage.setItem("cart", JSON.stringify(updatedCart));
            showSuccessToast("ƒê·∫∑t h√†ng th√†nh c√¥ng. C·∫£m ∆°n qu√Ω kh√°ch");
            navigate('/datHangThanhCong', { state: { selectedProducts } });
        }
        else {
            showErrorToast(response.data);
        }
    }

    // ‚úÖ H√†m ki·ªÉm tra tr·∫°ng th√°i h√≥a ƒë∆°n
    const checkPaymentStatus = async (maHoaDon) => {
        try {
            const response = await axios.get(`http://localhost:8080/payment/check-status?maHoaDon=${maHoaDon}`);
            if (response.data === "ƒê√£ thanh to√°n") {
                luuHoaDon(maHoaDon);
            } else {
                showErrorToast("B·∫°n ch∆∞a ho√†n t·∫•t thanh to√°n!");
            }
        } catch (err) {
            console.error("L·ªói khi ki·ªÉm tra thanh to√°n:", err);
        }
    };

    const xacNhanDatHang = async () => {
        try {
            setOpenConfirmDatHang(false);
            if (selectedPaymentMethod === "COD") {
                luuHoaDon();
            } else if (selectedPaymentMethod === "PayNow") {
                const maHoaDon = "HD" + (Date.now() % 100000);
                const response = await axios.get(`http://localhost:8080/payment/vn-pay?maHoaDon=${maHoaDon}&amount=${tongTienThanhToan}`);
                const paymentWindow = window.open(response.data, "_blank"); // M·ªü VNPay ·ªü tab m·ªõi

                // üëÄ Ki·ªÉm tra n·∫øu tab VNPay b·ªã ƒë√≥ng
                const checkClosed = setInterval(async () => {
                    if (paymentWindow?.closed) {
                        clearInterval(checkClosed);
                        checkPaymentStatus(maHoaDon); // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
                    }
                }, 1000);
            }
        } catch (err) {
            console.error("L·ªói khi t·∫°o thanh to√°n:", err);
            showErrorToast("C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Vui l√≤ng load l·∫°i trang");
        }
    };

    const handleChange = (event) => {
        setSelectedPaymentMethod(event.target.value);
    };

    const roundToNearestThousand = (number) => {
        return Math.round(number / 1000) * 1000;
    };
    // H√†m s·ª≠ d·ª•ng ƒë·ªÉ g·ªçi t·ªânh th√†nh qu·∫≠n huy·ªán x√£ Vi·ªát Nam
    useEffect(() => {
        // axios
        //   .get(
        //     "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json"
        //   )
        axios
            .get(
                `https://online-gateway.ghn.vn/shiip/public-api/master-data/province`,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                }
            )
            .then((response) => {
                const normalizedCities = response.data.data.map((city) => ({
                    ...city,
                    Name: city.ProvinceName.replace(/^(Th√†nh ph·ªë |T·ªânh )/, ""), // Lo·∫°i b·ªè "Th√†nh ph·ªë " v√† "T·ªânh "
                }));
                setCities(normalizedCities); // C·∫≠p nh·∫≠t citiess thay v√¨ setCities
                setNewCities(normalizedCities); // C·∫≠p nh·∫≠t citiess thay v√¨ setCities

            })
            .catch((error) => console.error("Error fetching data:", error));
    }, []);

    const handleCityChange = (event) => {
        const cityName = event.target.value;
        setCity(cityName); // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa city
        setDistrict(""); // Reset qu·∫≠n/huy·ªán khi thay ƒë·ªïi t·ªânh th√†nh
        setWard(""); // Reset x√£/ph∆∞·ªùng khi thay ƒë·ªïi qu·∫≠n/huy·ªán
        const id = cities.find((c) => c.Name === cityName).ProvinceID;
        setSelectedGHNDistrict(id);
        const fetchDistricts = async () => {
            const districtResponse = await axios.get(
                `https://online-gateway.ghn.vn/shiip/public-api/master-data/district`,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                    params: {
                        province_id: id,
                    },
                }
            );
            setDistricts(districtResponse.data.data);
        };
        fetchDistricts();
        setWards([]); // Reset x√£/ph∆∞·ªùng
    };

    const handleDistrictChange = (event) => {
        const districtName = event.target.value;
        setDistrict(districtName); // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa district
        setWard(""); // Reset x√£/ph∆∞·ªùng khi thay ƒë·ªïi qu·∫≠n/huy·ªán

        const id = districts.find(
            (d) => d.DistrictName === districtName
        ).DistrictID;
        setSelectedGHNDistrict(id);
        const fetchWards = async () => {
            const wardsResponse = await axios.get(
                `https://online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=` +
                id,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                }
            );
            setWards(wardsResponse.data.data);
        };
        fetchWards();
    };

    const handleWardChange = (event) => {
        setWard(event.target.value);

        const id = wards.find((d) => d.WardName === event.target.value).WardCode;
        setselectedGHNWard(id);

        // L·∫•y ph√≠ d·ªãch v·ª• c·ªßa giao h√†ng nhanh d·ª±a tr√™n huy·ªán v√† x√£ ƒë√£ ch·ªçn
        const fetchGHNServiceFee = async () => {
            const serviceFeeResponse = await axios.get(
                `https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee`,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                    params: {
                        service_type_id: 2,
                        to_district_id: selectedGHNDistrict,
                        to_ward_code: selectedGHNWard,
                        weight: 3000,
                        insurance_value: 0,
                    },
                }
            );
            const rawFee = serviceFeeResponse.data.data.service_fee;
            setDiscount(roundToNearestThousand(rawFee));
        };
        fetchGHNServiceFee();
    };

    // H√†m thay ƒë·ªïi t·ªânh th√†nh cho modal
    // H√†m thay ƒë·ªïi t·ªânh th√†nh cho modal
    const handleCityChangeModal = (event) => {
        const cityName = event.target.value;
        setNewCity(cityName);
        setNewDistrict(""); // Reset qu·∫≠n/huy·ªán khi thay ƒë·ªïi t·ªânh th√†nh
        setNewWard(""); // Reset x√£/ph∆∞·ªùng khi thay ƒë·ªïi qu·∫≠n/huy·ªán

        const city = cities.find((c) => c.Name === cityName);
        const fetchDistricts = async () => {
            const districtResponse = await axios.get(
                `https://online-gateway.ghn.vn/shiip/public-api/master-data/district`,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                    params: {
                        province_id: city.ProvinceID,
                    },
                }
            );
            setNewDistricts(districtResponse.data.data);
        };
        fetchDistricts();
        setNewWards([]); // Reset x√£/ph∆∞·ªùng
    };

    // H√†m thay ƒë·ªïi qu·∫≠n/huy·ªán cho modal
    const handleDistrictChangeModal = (event) => {
        const districtName = event.target.value;
        setNewDistrict(districtName);
        setNewWard("");

        const id = newDistricts.find(
            (d) => d.DistrictName === districtName
        ).DistrictID;
        const fetchWards = async () => {
            const wardsResponse = await axios.get(
                `https://online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=` +
                id,
                {
                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                }
            );
            setNewWards(wardsResponse.data.data);
        };
        fetchWards();
    };

    // H√†m thay ƒë·ªïi x√£/ph∆∞·ªùng cho modal
    const handleWardChangeModal = (event) => {
        setNewWard(event.target.value);
    };

    // H√†m m·ªü v√† ƒë√≥ng modal voucher
    const handleOpenVoucherModal = () => {
        setOpenVoucherModal(true);
    };

    const handleCloseVoucherModal = () => {
        setOpenVoucherModal(false);
    };

    // G·ªçi API t√¨m ki·∫øm voucher
    const handleVoucherCodeChange = async (event) => {
        const keyword = event.target.value;
        setVoucherCode(keyword);

        const customerId = selectedCustomerId ? selectedCustomerId : null;

        try {
            const params = { keyword };
            if (customerId) {
                params.idKhachHang = customerId;
            }

            const response = await axios.get('http://localhost:8080/dragonbee/tim-kiem-phieu-giam-gia', { params });
            setVouchers(response.data);
        } catch (error) {
            console.error("Error fetching vouchers:", error);
        }
    };

    // T·ª± ƒë·ªông ch·ªçn voucher t·ªët nh·∫•t khi fetch d·ªØ li·ªáu
    const fetchVouchers = async () => {
        try {
            const customerId = selectedCustomerId ? selectedCustomerId : null;
            const params = { keyword: '' };
            if (customerId) {
                params.idKhachHang = customerId;
            }

            const response = await axios.get('http://localhost:8080/dragonbee/tim-kiem-phieu-giam-gia', { params });

            // S·∫Øp x·∫øp d·ªØ li·ªáu theo ng√†y t·∫°o (ngayTao)
            const sortedVouchers = response.data.sort((a, b) => {
                return new Date(b.ngayTao) - new Date(a.ngayTao);
            });

            // T√≠nh to√°n gi√° tr·ªã gi·∫£m c·ªßa t·∫•t c·∫£ c√°c phi·∫øu gi·∫£m gi√°
            const validVouchers = sortedVouchers.filter(voucher => tongTien >= voucher.soTienToiThieu);

            // T√¨m voucher t·ªët nh·∫•t
            let bestVoucher = null;
            let bestDiscount = 0;

            validVouchers.forEach(voucher => {
                let discountAmount = 0;
                if (voucher.loaiPhieuGiamGia === "C·ªë ƒë·ªãnh") {
                    discountAmount = voucher.giaTriGiam;
                } else if (voucher.loaiPhieuGiamGia === "Ph·∫ßn trƒÉm") {
                    discountAmount = (tongTien || 0) * (voucher.giaTriGiam / 100);
                    if (voucher.soTienGiamToiDa) {
                        discountAmount = Math.min(discountAmount, voucher.soTienGiamToiDa);
                    }
                }

                if (discountAmount > bestDiscount) {
                    bestDiscount = discountAmount;
                    bestVoucher = voucher;
                }
            });

            // C·∫≠p nh·∫≠t voucher t·ªët nh·∫•t n·∫øu c√≥
            if (bestVoucher) {
                setSelectedVoucherCode(bestVoucher.ma);
                setDiscountAmount(bestDiscount);
                setBestVoucher(bestVoucher); // L∆∞u bestVoucher v√†o state
            } else {
                setBestVoucher(null); // ƒê·ªÅ ph√≤ng tr∆∞·ªùng h·ª£p kh√¥ng c√≥ phi·∫øu n√†o ph√π h·ª£p
            }

            // C·∫≠p nh·∫≠t danh s√°ch phi·∫øu gi·∫£m gi√°
            setVouchers(sortedVouchers);

        } catch (error) {
            console.error("Error fetching vouchers:", error);
        }
    };


    // G·ªçi fetchVouchers khi modal m·ªü l·∫ßn ƒë·∫ßu ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu voucher
    useEffect(() => {
        if (openVoucherModal) {
            fetchVouchers();
        }
    }, [openVoucherModal, selectedCustomerId]); // Th√™m selectedCustomerId v√†o dependency


    // Khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt phi·∫øu gi·∫£m gi√°
    const handleUseVoucher = (voucherCode) => {
        const selectedVoucher = vouchers.find(v => v.ma === voucherCode);
        if (!selectedVoucher) return;

        let discountAmount = 0;

        if (selectedVoucher.loaiPhieuGiamGia === "C·ªë ƒë·ªãnh") {
            discountAmount = selectedVoucher.giaTriGiam;
        } else if (selectedVoucher.loaiPhieuGiamGia === "Ph·∫ßn trƒÉm") {
            discountAmount = (tongTien || 0) * (selectedVoucher.giaTriGiam / 100);
            if (selectedVoucher.soTienGiamToiDa) {
                discountAmount = Math.min(discountAmount, selectedVoucher.soTienGiamToiDa);
            }
        }

        setSelectedVoucherCode(voucherCode);
        setDiscountAmount(discountAmount);
        handleCloseVoucherModal();
    };

    // C·∫≠p nh·∫≠t UI ƒë·ªÉ l√†m m·ªù v√† hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán
    const isVoucherValid = (voucher) => {
        return tongTien >= voucher.soTienToiThieu;
    };

    // H√†m ƒë·ªÉ t√≠nh to√°n s·ªë ti·ªÅn thi·∫øu ƒë·ªÉ √°p d·ª•ng voucher
    const calculateAmountToSpend = (voucher) => {
        if (tongTien < voucher.soTienToiThieu) {
            return voucher.soTienToiThieu - tongTien;
        }
        return 0;
    };

    // H√†m fetchVouchers ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong tr∆∞·ªõc ƒë√≥, b·∫°n kh√¥ng c·∫ßn thay ƒë·ªïi h√†m n√†y

    useEffect(() => {
        if (tongTien) {
            fetchVouchers(); // G·ªçi l·∫°i fetchVouchers m·ªói khi t·ªïng ti·ªÅn thay ƒë·ªïi
        }
    }, [tongTien]); // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa t·ªïng ti·ªÅn (tongTienSanPham)

    // H√†m ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o thi·∫øu ti·ªÅn
    const renderAdditionalAmountMessage = (voucher) => {
        const amountToSpend = calculateAmountToSpend(voucher);
        const isBest = bestVoucher?.id === voucher.id;

        return (
            <>
                {amountToSpend > 0 && (
                    <Typography sx={{ color: "red", marginTop: 1, fontSize: 12 }}>
                        B·∫°n c·∫ßn chi ti√™u th√™m {amountToSpend.toLocaleString()} VNƒê ƒë·ªÉ √°p d·ª•ng
                        phi·∫øu gi·∫£m gi√° n√†y.
                    </Typography>
                )}
                {isBest && (
                    <Typography
                        sx={{
                            color: "green",
                            marginTop: 1,
                            fontSize: 12,
                            fontWeight: "bold",
                        }}
                    >
                        ƒê√¢y l√† phi·∫øu gi·∫£m gi√° t·ªët nh·∫•t!
                    </Typography>
                )}
            </>
        );
    };

    const checkVoucherAvailability = async (voucherCode) => {
        try {
            const response = await axios.get(`http://localhost:8080/dragonbee/kiem-tra-voucher/${voucherCode}`);
            console.log(response.data.soLuong);
            return response.data.soLuong > 0; // Ki·ªÉm tra s·ªë l∆∞·ª£ng voucher c√≤n l·∫°i
        } catch (error) {
            console.error("Error checking voucher availability:", error);
            return false;
        }
    };

    useEffect(() => {
        const intervalId = setInterval(async () => {
            if (selectedVoucherCode) {
                const isAvailable = await checkVoucherAvailability(selectedVoucherCode);
                if (!isAvailable) {
                    alert("Phi·∫øu gi·∫£m gi√° ƒë√£ h·∫øt, vui l√≤ng ch·ªçn phi·∫øu kh√°c.");
                    setSelectedVoucherCode(''); // X√≥a voucher ƒë√£ ch·ªçn
                    setDiscountAmount(0); // ƒê·∫∑t gi·∫£m gi√° v·ªÅ 0
                }
            }
        }, 1000); // Ki·ªÉm tra m·ªói gi√¢y

        // Cleanup interval khi component unmount ho·∫∑c khi m√£ voucher thay ƒë·ªïi
        return () => clearInterval(intervalId);
    }, [selectedVoucherCode]); // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa m√£ voucher ƒë√£ ch·ªçn  

    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [addresses, setAddresses] = useState([]); // ƒê·ªÉ l∆∞u danh s√°ch ƒë·ªãa ch·ªâ
    const [defaultAddress, setDefaultAddress] = useState(null); // ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh

    useEffect(() => {
        const user = localStorage.getItem("userKH");
        if (user) {
            setIsLoggedIn(true);
            const customerId = JSON.parse(user).khachHang.id;

            fetch(`http://localhost:8080/dragonbee/danh-sach-dia-chi?customerId=${customerId}`)
                .then((res) => res.json())
                .then(async (data) => {
                    const sortedAddresses = data.sort((a, b) => {
                        if (a.macDinh && !b.macDinh) return -1;
                        if (!a.macDinh && b.macDinh) return 1;
                        return 0;
                    });

                    setAddresses(sortedAddresses);

                    const defaultAddr = sortedAddresses.find((addr) => addr.macDinh);
                    if (defaultAddr) {
                        setDefaultAddress(defaultAddr);
                        setCity(defaultAddr.thanhPho);
                        setDistrict(defaultAddr.huyen);
                        setWard(defaultAddr.xa);
                        setSpecificAddress(`${defaultAddr.soNha}, ${defaultAddr.duong}`);

                        // L·∫•y ID t·ªânh/th√†nh t·ª´ cities
                        const selectedCity = cities.find(c => c.Name === defaultAddr.thanhPho);
                        if (!selectedCity) return;

                        setSelectedGHNDistrict(selectedCity.ProvinceID);

                        // Fetch qu·∫≠n/huy·ªán
                        const districtResponse = await axios.get(
                            `https://online-gateway.ghn.vn/shiip/public-api/master-data/district`,
                            {
                                headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                                params: { province_id: selectedCity.ProvinceID }
                            }
                        );
                        setDistricts(districtResponse.data.data);

                        const selectedDistrict = districtResponse.data.data.find(d => d.DistrictName === defaultAddr.huyen);
                        if (!selectedDistrict) return;

                        setSelectedGHNDistrict(selectedDistrict.DistrictID);

                        // Fetch x√£/ph∆∞·ªùng
                        const wardResponse = await axios.get(
                            `https://online-gateway.ghn.vn/shiip/public-api/master-data/ward`,
                            {
                                headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                                params: { district_id: selectedDistrict.DistrictID }
                            }
                        );
                        setWards(wardResponse.data.data);

                        const selectedWard = wardResponse.data.data.find(w => w.WardName === defaultAddr.xa);
                        if (selectedWard) {
                            setselectedGHNWard(selectedWard.WardCode);
                        }

                        // G·ªçi ph√≠ GHN (tu·ª≥ ch·ªçn)
                        const feeResponse = await axios.get(
                            `https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee`,
                            {
                                headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                                params: {
                                    service_type_id: 2,
                                    to_district_id: selectedDistrict.DistrictID,
                                    to_ward_code: selectedWard?.WardCode,
                                    weight: 3000,
                                    insurance_value: 0,
                                },
                            }
                        );
                        const rawFee = feeResponse.data.data.service_fee;
                        setDiscount(roundToNearestThousand(rawFee));
                    }
                })
                .catch((error) => console.error("Error fetching addresses:", error));
        } else {
            setIsLoggedIn(false);
        }
    }, [cities]);
    // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa cities ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i khi c·∫ßn

    useEffect(() => {
        // Ki·ªÉm tra xem kh√°ch h√†ng c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
        const user = localStorage.getItem('userKH');
        if (user) {
            const customerData = JSON.parse(user);
            setTenNguoiNhan(customerData.khachHang.tenKhachHang); // Set t√™n ng∆∞·ªùi nh·∫≠n
            setSdtNguoiNhan(customerData.khachHang.sdt); // Set s·ªë ƒëi·ªán tho·∫°i
            setEmailNguoiNhan(customerData.khachHang.email); // Set email
        }
    }, []);

    const handleLoginRedirect = () => {
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang login
        navigate('/login');
    };

    const [openDC, setOpenDC] = useState(false);
    const handleOpenDC = () => setOpenDC(true);
    const handleCloseDC = () => setOpenDC(false);
    const [openChonDC, setOpenChonDC] = useState(false);

    const handleClickOpen = () => {
        setOpenChonDC(true);
    };

    // H√†m ƒë√≥ng modal
    const handleCloseChonDC = () => {
        // Ch·ªâ reset c√°c gi√° tr·ªã ƒë√£ ch·ªçn, kh√¥ng x√≥a d·ªØ li·ªáu
        setNewCity('');  // Reset th√†nh ph·ªë
        setNewDistrict('');  // Reset qu·∫≠n/huy·ªán
        setNewWard('');  // Reset x√£/ph∆∞·ªùng

        setOpenChonDC(false);  // ƒê√≥ng modal
    };

    // Th√™m m·ªõi ƒë·ªãa ch·ªâ cho kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
    const handleSaveAddress = () => {
        const detailedAddress = document
            .getElementById("detailed-address")
            .value.trim();
        const description = document.getElementById("description").value.trim();
        const [soNha, duong] = detailedAddress.split(",");

        // L·∫•y customerId t·ª´ localStorage
        const user = localStorage.getItem('userKH');
        const selectedCustomerId = user ? JSON.parse(user).khachHang.id : null; // L·∫•y ID kh√°ch h√†ng t·ª´ localStorage

        const newAddress = {
            khachHang: { id: selectedCustomerId },
            soNha: soNha?.trim() || "",
            duong: duong?.trim() || "",
            xa: newWard,
            huyen: newDistrict,
            thanhPho: newCity,
            moTa: description || "",
            trangThai: "Ho·∫°t ƒë·ªông",
            macDinh: false,
        };

        // G·ªçi API ƒë·ªÉ th√™m ƒë·ªãa ch·ªâ m·ªõi
        axios
            .post("http://localhost:8080/dragonbee/them-dia-chi", newAddress)
            .then((response) => {
                // Sau khi th√™m ƒë·ªãa ch·ªâ, g·ªçi l·∫°i API ƒë·ªÉ l·∫•y danh s√°ch ƒë·ªãa ch·ªâ m·ªõi nh·∫•t t·ª´ server
                axios
                    .get(
                        `http://localhost:8080/dragonbee/danh-sach-dia-chi?customerId=${selectedCustomerId}`
                    )
                    .then((response) => {
                        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë·ªãa ch·ªâ t·ª´ response
                        setAddresses(response.data);

                        // L·∫•y ƒë·ªãa ch·ªâ m·ªõi nh·∫•t (·ªü cu·ªëi danh s√°ch) ƒë·ªÉ t·ª± ƒë·ªông ch·ªçn
                        const lastAddress = response.data[response.data.length - 1];
                        handleSelectAddress(lastAddress); // Ch·ªçn ƒë·ªãa ch·ªâ cu·ªëi c√πng trong danh s√°ch

                        // ƒê√≥ng modal th√™m ƒë·ªãa ch·ªâ sau khi l∆∞u th√†nh c√¥ng
                        setOpenChonDC(false); // ƒê√≥ng modal th√™m ƒë·ªãa ch·ªâ

                        showSuccessToast("Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
                        setNewCity(""); // Reset th√†nh ph·ªë
                        setNewDistrict(""); // Reset qu·∫≠n/huy·ªán
                        setNewWard(""); // Reset x√£/ph∆∞·ªùng
                    })
                    .catch((error) => {
                        console.error("L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ:", error);
                        showErrorToast("C√≥ l·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ.");
                    });
            })
            .catch((error) => {
                console.error("C√≥ l·ªói khi th√™m ƒë·ªãa ch·ªâ:", error);
                showErrorToast("C√≥ l·ªói khi th√™m ƒë·ªãa ch·ªâ.");
            });
    };

    const handleSelectAddress = async (address) => {
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage
        const user = localStorage.getItem('userKH');
        const selectedCustomerId = user ? JSON.parse(user).khachHang.id : null;

        if (!selectedCustomerId) return; // N·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng th√¨ tho√°t

        setTenNguoiNhan(address.khachHang.tenKhachHang);  // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi nh·∫≠n
        setSdtNguoiNhan(address.khachHang.sdt);  // C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n
        setCity(address.thanhPho);  // C·∫≠p nh·∫≠t th√†nh ph·ªë
        setDistrict(address.huyen);  // C·∫≠p nh·∫≠t huy·ªán
        setWard(address.xa);  // C·∫≠p nh·∫≠t x√£/ph∆∞·ªùng
        setSpecificAddress(`${address.soNha}, ${address.duong}`);  // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ c·ª• th·ªÉ

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch qu·∫≠n/huy·ªán v√† x√£/ph∆∞·ªùng d·ª±a tr√™n th√†nh ph·ªë v√† huy·ªán
        const city = cities.find((city) => city.Name === address.thanhPho);
        if (city) {
            setCity(address.thanhPho);
            const fetchDistricts = async () => {
                const districtResponse = await axios.get(
                    `https://online-gateway.ghn.vn/shiip/public-api/master-data/district`,
                    {
                        headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                        params: {
                            province_id: city.ProvinceID,
                        },
                    }
                );
                const districts = districtResponse.data.data;
                setDistricts(districts);
                setDistrict(address.huyen);
                const selectedDistrict = districts.find(
                    (d) => d.DistrictName === address.huyen
                );
                if (selectedDistrict) {
                    const fetchWards = async () => {
                        const wardsResponse = await axios.get(
                            `https://online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=` +
                            selectedDistrict.DistrictID,
                            {
                                headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                            }
                        );
                        const wards = wardsResponse.data.data;
                        setWards(wards);
                        setWard(address.xa);
                        const selectedWard = wards.find((d) => d.WardName === address.xa);
                        const fetchGHNServiceFee = async () => {
                            const serviceFeeResponse = await axios.get(
                                `https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee`,
                                {
                                    headers: { token: "2ae73454-f01a-11ef-b6c2-d21b7695c8d0" },
                                    params: {
                                        service_type_id: 2,
                                        to_district_id: selectedDistrict.DistrictID,
                                        to_ward_code: selectedWard.WardCode,
                                        weight: 3000,
                                        insurance_value: 0,
                                    },
                                }
                            );
                            const rawFee = serviceFeeResponse.data.data.service_fee;
                            setDiscount(roundToNearestThousand(rawFee));
                        };
                        await fetchGHNServiceFee();
                    };
                    await fetchWards();
                }
            };
            await fetchDistricts();
        } else {
            setDistricts([]); // N·∫øu kh√¥ng t√¨m th·∫•y th√†nh ph·ªë, reset danh s√°ch qu·∫≠n/huy·ªán
            setWards([]); // Reset x√£/ph∆∞·ªùng
        }

        setOpenDC(false); // ƒê√≥ng modal sau khi ch·ªçn
    };

    // H√†m ƒë·ªÉ x·ª≠ l√Ω nh·∫≠p li·ªáu cho "ph√≠ ship"handleDiscountInput
    const handleDiscountInput = (e) => {
        var newValue = e.target.value.replace(/\D/g, ""); // Ch·ªâ cho ph√©p nh·∫≠p s·ªë

        if (/^0+$/.test(newValue)) {
            newValue = "0";
        } else {
            newValue = newValue.replace(/^0+/, ""); // X√≥a 0 th·ª´a ƒë·∫ßu
        }

        setDiscount(newValue);
    };

    return (
        <Container sx={{ marginBottom: 0 }}>
            <Box sx={{ display: 'flex', height: '100vh' }}>
                <Grid container sx={{ flex: 1 }}>
                    {/* Left side (60%) - Customer information */}
                    <Grid item xs={7} sx={{ padding: 2, paddingRight: '60px' }}>
                        <Typography variant="h4" sx={{ fontWeight: 'bold', marginBottom: '16px' }}>
                            TH√îNG TIN
                        </Typography>

                        <Breadcrumbs aria-label="breadcrumb">
                            <Link color="inherit" href="http://localhost:3000/home" sx={{ fontSize: '14px', textDecoration: 'none' }}>
                                Trang ch·ªß
                            </Link>
                            <Link color="inherit" href="http://localhost:3000/gioHang" sx={{ fontSize: '14px', textDecoration: 'none' }}>
                                Gi·ªè h√†ng
                            </Link>
                            <Typography color="text.primary" sx={{ fontSize: '14px' }}>
                                Thanh to√°n
                            </Typography>
                        </Breadcrumbs>

                        <Box>
                            {isLoggedIn ? (
                                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                                    <Button
                                        variant="outlined"
                                        onClick={handleOpenDC}
                                        sx={{
                                            color: "#1976D2",
                                            borderColor: "#1976D2",
                                            backgroundColor: "#fff",
                                            "&:hover": {
                                                backgroundColor: "#e3f2fd",
                                                borderColor: "#1565c0",
                                                color: "#1565c0",
                                            },

                                        }}
                                    >
                                        Ch·ªçn ƒë·ªãa ch·ªâ
                                    </Button>
                                </Box>
                            ) : (
                                <Box
                                    sx={{
                                        border: '1px solid #e0e0e0',
                                        padding: '16px',
                                        borderRadius: '8px',
                                        marginTop: '24px',
                                        display: 'flex',
                                        justifyContent: 'space-between',
                                        alignItems: 'center',
                                    }}
                                >
                                    <Box>
                                        <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
                                            B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?
                                        </Typography>
                                        <Typography variant="body2" sx={{ marginTop: '8px' }}>
                                            ƒêƒÉng nh·∫≠p ƒë·ªÉ c√≥ tr·∫£i nghi·ªám thanh to√°n nhanh nh·∫•t
                                        </Typography>
                                    </Box>
                                    <Button
                                        variant="contained"
                                        sx={{ fontWeight: 'bold' }}
                                        onClick={handleLoginRedirect}  // G·ªçi h√†m ƒëi·ªÅu h∆∞·ªõng khi click
                                    >
                                        ƒêƒÇNG NH·∫¨P
                                    </Button>
                                </Box>
                            )}
                        </Box>

                        <Grid container spacing={2}>
                            <Grid item xs={6}>
                                <TextField fullWidth label="H·ªç v√† t√™n" margin="normal" size="small" value={tenNguoiNhan}
                                    onChange={(e) => setTenNguoiNhan(e.target.value)} />
                            </Grid>
                            <Grid item xs={6}>
                                <TextField fullWidth label="S·ªë ƒëi·ªán tho·∫°i" margin="normal" size="small" value={sdtNguoiNhan}
                                    onChange={(e) => setSdtNguoiNhan(e.target.value)} />
                            </Grid>
                        </Grid>

                        <Grid container spacing={2}>
                            <Grid item xs={12}>
                                <TextField fullWidth label="Email" margin="normal" size="small" value={emailNguoiNhan}
                                    onChange={(e) => setEmailNguoiNhan(e.target.value)} />
                            </Grid>
                        </Grid>

                        <Grid container spacing={2} marginTop={0}>
                            <Grid item xs={6}>
                                <FormControl fullWidth size="small">
                                    <InputLabel>T·ªânh/Th√†nh ph·ªë</InputLabel>
                                    <Select value={city} onChange={handleCityChange} label="T·ªânh/Th√†nh ph·ªë">
                                        {cities.length > 0 ? (
                                            cities.map((city) => (
                                                <MenuItem key={city.ProvinceID} value={city.Name}>
                                                    {city.Name}
                                                </MenuItem>
                                            ))
                                        ) : (
                                            <MenuItem disabled>Kh√¥ng c√≥ d·ªØ li·ªáu</MenuItem>
                                        )}
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={6}>
                                <FormControl fullWidth size="small" sx={{ height: '100%' }}>
                                    <InputLabel>Qu·∫≠n/Huy·ªán</InputLabel>
                                    <Select
                                        value={district}
                                        onChange={handleDistrictChange}
                                        label="Qu·∫≠n/Huy·ªán"
                                    >
                                        {districts.length > 0 ? (
                                            districts.map((district) => (
                                                <MenuItem key={district.DistrictID} value={district.DistrictName}>
                                                    {district.DistrictName}
                                                </MenuItem>
                                            ))
                                        ) : (
                                            <MenuItem disabled>Kh√¥ng c√≥ d·ªØ li·ªáu</MenuItem>
                                        )}
                                    </Select>
                                </FormControl>
                            </Grid>
                        </Grid>

                        <Grid container spacing={2} marginTop={-1}>
                            <Grid item xs={6} marginTop={2}>
                                <FormControl fullWidth size="small" sx={{ height: '100%' }}>
                                    <InputLabel>X√£/Ph∆∞·ªùng</InputLabel>
                                    <Select
                                        value={ward}
                                        onChange={handleWardChange}
                                        label="X√£/Ph∆∞·ªùng"
                                    >
                                        {wards.length > 0 ? (
                                            wards.map((ward) => (
                                                <MenuItem key={ward.WardCode} value={ward.WardName}>
                                                    {ward.WardName}
                                                </MenuItem>
                                            ))
                                        ) : (
                                            <MenuItem disabled>Kh√¥ng c√≥ d·ªØ li·ªáu</MenuItem>
                                        )}
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={6}>
                                <TextField fullWidth label="ƒê·ªãa ch·ªâ c·ª• th·ªÉ" margin="normal" size="small" value={specificAddress}
                                    onChange={(e) => setSpecificAddress(e.target.value)} />
                            </Grid>
                        </Grid>


                        <TextField fullWidth label="Ghi ch√∫" margin="normal" size='small' value={ghiChu}
                            onChange={(e) => setGhiChu(e.target.value)} />

                        <div>
                            <Typography variant="subtitle1" gutterBottom marginTop={1} fontWeight={'bold'}>
                                Ph∆∞∆°ng th·ª©c thanh to√°n
                            </Typography>
                            <Box
                                display="flex"
                                gap={2} // kho·∫£ng c√°ch gi·ªØa hai √¥ (20px, v√¨ m·∫∑c ƒë·ªãnh gap l√† t√≠nh theo ƒë∆°n v·ªã px)
                            >
                                <Box
                                    border={1} // t·∫°o vi·ªÅn
                                    padding={1} // kho·∫£ng c√°ch gi·ªØa c√°c ph·∫ßn t·ª≠ v√† vi·ªÅn
                                    width="270px" // chi·ªÅu r·ªông c·ªë ƒë·ªãnh cho m·ªói √¥ (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
                                    height="50px" // chi·ªÅu cao c·ªë ƒë·ªãnh cho m·ªói √¥
                                    display="flex"
                                    alignItems="center"
                                    justifyContent="center"
                                >
                                    <FormControlLabel
                                        value="COD"
                                        control={<Radio
                                            name="paymentMethod"
                                            checked={selectedPaymentMethod === "COD"}
                                            onChange={handleChange} // G·∫Øn s·ª± ki·ªán onChange
                                        />}
                                        label={
                                            <Box display="flex" alignItems="center">
                                                <img src={CODImage} alt="COD" style={{ width: 30, height: 30, marginRight: 8 }} />
                                                <span style={{ fontSize: 15 }}>Thanh to√°n khi nh·∫≠n h√†ng</span>
                                            </Box>
                                        }
                                    />
                                </Box>
                                <Box
                                    border={1} // t·∫°o vi·ªÅn
                                    padding={1} // kho·∫£ng c√°ch gi·ªØa c√°c ph·∫ßn t·ª≠ v√† vi·ªÅn
                                    width="270px" // chi·ªÅu r·ªông c·ªë ƒë·ªãnh cho m·ªói √¥ (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
                                    height="50px" // chi·ªÅu cao c·ªë ƒë·ªãnh cho m·ªói √¥
                                    display="flex"
                                    alignItems="center"
                                    justifyContent="center"
                                >
                                    <FormControlLabel
                                        value="PayNow"
                                        control={<Radio
                                            name="paymentMethod"
                                            checked={selectedPaymentMethod === "PayNow"}
                                            onChange={handleChange} // G·∫Øn s·ª± ki·ªán onChange
                                        />}
                                        label={
                                            <Box display="flex" alignItems="center">
                                                <img src={PayNowImage} alt="Pay Now" style={{ width: 90, height: 30, marginRight: 8 }} />
                                                <span style={{ fontSize: 15 }}>Thanh to√°n ngay</span>
                                            </Box>
                                        }
                                    />
                                </Box>
                            </Box>
                        </div>
                        <Button variant="contained" fullWidth sx={{ mt: 2 }} onClick={khiAnNutXacNhanDatHang} disabled={products?.length === 0}>HO√ÄN TH√ÄNH ƒê·∫∂T H√ÄNG</Button>
                    </Grid>

                    {/* Right side (40%) - Order summary */}
                    <Grid item xs={5} sx={{ backgroundColor: '#f5f5f5', padding: 2 }}>
                        {/* <Typography variant="h6" gutterBottom>Th√¥ng tin ƒë∆°n h√†ng</Typography> */}

                        {products.map((product, index) => (
                            <Box key={index} sx={{ marginBottom: 2 }}>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', marginBottom: 1, position: 'relative' }}>
                                    {/* C·ªôt 1: H√¨nh ·∫£nh s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng */}
                                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: 2, borderRadius: 2, width: '20%' }}>
                                        <Box sx={{ position: 'relative' }}>
                                            <img
                                                src={product.anhSPCT}
                                                alt={product.ten}
                                                width="70"
                                                height="70"
                                                style={{ objectFit: 'cover' }}
                                            />
                                            <Typography
                                                sx={{
                                                    position: 'absolute',
                                                    top: -10,
                                                    right: -10,
                                                    backgroundColor: '#1976D2',
                                                    borderRadius: '50%',
                                                    padding: '5px 10px',
                                                    color: 'white',
                                                    fontSize: 10
                                                }}
                                            >
                                                {product.quantity}
                                            </Typography>
                                        </Box>
                                    </Box>

                                    {/* C·ªôt 2: T√™n s·∫£n ph·∫©m v√† Size */}
                                    <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'flex-start', padding: 2, borderRadius: 2, width: '65%' }}>
                                        <Typography sx={{
                                            fontSize: '14px',
                                            fontWeight: 'bold',
                                            marginBottom: 0.5,
                                            wordBreak: 'break-word',
                                            maxWidth: '100%',
                                            overflow: 'hidden',
                                            textOverflow: 'ellipsis'
                                        }}>
                                            {product.tenSPCT}
                                        </Typography>
                                        <Typography
                                            variant="body2"
                                            color="textSecondary"
                                            sx={{
                                                backgroundColor: '#1976D2',
                                                color: '#ffffff',
                                                padding: '4px 10px',
                                                borderRadius: '12px',
                                                fontWeight: 'bold',
                                                fontSize: '12px',
                                                marginTop: -0.5
                                            }}
                                        >
                                            Size: {product.tenSize}
                                        </Typography>
                                    </Box>

                                    {/* C·ªôt 3: Gi√° */}
                                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', padding: 2, borderRadius: 2, width: '30%' }}>
                                        <Typography sx={{
                                            fontSize: '14px',
                                            fontWeight: 'bold',
                                            textAlign: 'right',
                                            whiteSpace: 'nowrap',
                                            marginRight: -2
                                        }}>
                                            <span style={{ color: 'red', marginLeft: 5 }}>
                                                {product.gia?.toLocaleString()} VNƒê
                                            </span>
                                        </Typography>
                                    </Box>
                                </Box>

                                {/* D√≤ng k·∫ª m·ªù */}
                                <Box sx={{
                                    borderBottom: '1px solid #e0e0e0',
                                    marginTop: 2
                                }} />
                            </Box>
                        ))}

                        {/* T·ªïng ti·ªÅn */}
                        <Box sx={{
                            display: 'flex',
                            justifyContent: 'flex-end',
                            marginTop: 2,
                            paddingRight: 0
                        }}>
                            <Typography sx={{
                                fontSize: '16px',
                                fontWeight: 'bold',
                                color: 'red'
                            }}>
                                T·ªïng ti·ªÅn: {tongTien?.toLocaleString()} VNƒê
                            </Typography>
                        </Box>

                        <Box
                            sx={{
                                display: "flex",
                                justifyContent: "space-between",
                                marginTop: 2,
                                alignItems: "flex-start", // Chuy·ªÉn t·ª´ center sang flex-start ƒë·ªÉ c√°c box con c√≥ th·ªÉ gi√£n theo chi·ªÅu d·ªçc
                            }}
                        >
                            <Typography variant="body1" sx={{ marginTop: "6px" }}>
                                Phi·∫øu gi·∫£m gi√°:
                            </Typography>

                            <Box sx={{ display: "flex", flexDirection: "column", alignItems: "flex-end" }}>
                                <Box
                                    sx={{
                                        position: "relative",
                                        display: "flex",
                                        alignItems: "center",
                                    }}
                                >
                                    <Input
                                        value={selectedVoucherCode}
                                        sx={{ color: "#5e5e5ede", width: 140 }}
                                        endAdornment={
                                            <InputAdornment position="end" sx={{ position: "relative" }}>
                                                {selectedVoucherCode && (
                                                    <CloseIcon
                                                        sx={{
                                                            color: "red",
                                                            fontSize: 14,
                                                            cursor: "pointer",
                                                            position: "absolute",
                                                            left: -13,
                                                            top: "-3px",
                                                            transform: "translateY(-50%)",
                                                            backgroundColor: "white",
                                                            borderRadius: "50%",
                                                            boxShadow: "0 0 4px rgba(0,0,0,0.2)",
                                                        }}
                                                        onClick={() => {
                                                            setSelectedVoucherCode("");
                                                            setDiscountAmount(0);
                                                        }}
                                                    />
                                                )}
                                                <EditIcon
                                                    sx={{
                                                        color: "gray",
                                                        fontSize: 18,
                                                        cursor: "pointer",
                                                    }}
                                                    onClick={handleOpenVoucherModal}
                                                />
                                            </InputAdornment>
                                        }
                                        inputProps={{
                                            style: {
                                                textAlign: "right",
                                                fontWeight: "bold",
                                            },
                                        }}
                                    />
                                </Box>

                                {selectedVoucherCode === bestVoucher?.ma && (
                                    <Typography
                                        variant="caption"
                                        sx={{
                                            color: "green",
                                            marginTop: "4px",
                                            fontStyle: "italic",
                                        }}
                                    >
                                        Phi·∫øu gi·∫£m gi√° t·ªët nh·∫•t!
                                    </Typography>
                                )}
                            </Box>
                        </Box>
                        {showLeftPanel && (
                            <Box
                                sx={{
                                    display: "flex",
                                    justifyContent: "space-between",
                                    marginTop: 1,
                                }}
                            >
                                <Typography variant="body1">
                                    Ph√≠ v·∫≠n chuy·ªÉn:
                                </Typography>
                                <TextField
                                    fullWidth
                                    variant="standard"
                                    value={
                                        discount
                                            ? parseInt(discount, 10).toLocaleString()
                                            : discount
                                    }
                                    onChange={handleDiscountInput}
                                    onBlur={() => {
                                        if (discount === "") {
                                            setDiscount(0);
                                        }
                                    }}
                                    InputProps={{
                                        endAdornment: (
                                            <InputAdornment position="end">
                                                <Typography sx={{ color: "black" }}>
                                                    VNƒê
                                                </Typography>
                                            </InputAdornment>
                                        ),
                                    }}
                                    sx={{
                                        width: "140px", // Gi·ªõi h·∫°n chi·ªÅu r·ªông
                                        "& .MuiInputBase-input": {
                                            fontSize: 16,
                                            fontWeight: 400,
                                            textAlign: "right",
                                        },
                                    }}
                                />
                            </Box>
                        )}

                        <Box sx={{ display: 'flex', justifyContent: 'space-between', marginBottom: 1.5, marginTop: 1 }}>
                            <Typography>Gi·∫£m gi√°</Typography>
                            <Typography>{discountAmount.toLocaleString()} VNƒê</Typography>
                        </Box>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', fontWeight: 'bold' }}>
                            <Typography>T·ªïng s·ªë ti·ªÅn c·∫ßn thanh to√°n</Typography>
                            <Typography color="error">{tongTienThanhToan.toLocaleString()} VNƒê</Typography>
                        </Box>

                        <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
                            Ng√†y nh·∫≠n d·ª± ki·∫øn: {getEstimatedDeliveryDate()}
                        </Typography>
                    </Grid>
                </Grid>
            </Box>
            {/* Show Voucher */}
            <Dialog open={openVoucherModal} onClose={handleCloseVoucherModal} sx={{ '& .MuiDialog-paper': { width: '80%', maxWidth: '800px' } }}>
                <DialogTitle>
                    Ch·ªçn Voucher
                    <IconButton
                        edge="end"
                        color="inherit"
                        onClick={handleCloseVoucherModal}
                        sx={{ position: 'absolute', right: '25px', top: '15px' }}
                    >
                        <CloseIcon />
                    </IconButton>
                </DialogTitle>
                <DialogContent>
                    {/* Input voucher m√£ */}
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <TextField
                            placeholder='Nh·∫≠p m√£ ho·∫∑c t√™n voucher'
                            variant="outlined"
                            value={voucherCode}
                            onChange={handleVoucherCodeChange}
                            sx={{
                                marginBottom: 2,
                                marginTop: 1,
                                flex: 1,
                                '& .MuiInputBase-root': { height: '40px' },
                            }}
                        />
                    </Box>

                    {/* // Trong ph·∫ßn render danh s√°ch c√°c voucher */}
                    <Box sx={{ maxHeight: '400px', overflowY: 'auto' }}>
                        {vouchers.map((voucher) => (
                            <Box
                                key={voucher.id}
                                sx={{
                                    border: '1px dashed #db5656',
                                    padding: 2,
                                    marginBottom: 2,
                                    display: 'flex',
                                    justifyContent: 'space-between',
                                    alignItems: 'center',
                                    opacity: isVoucherValid(voucher) ? 1 : 0.5,
                                    pointerEvents: isVoucherValid(voucher) ? 'auto' : 'none',
                                }}
                            >
                                {/* N·ªôi dung voucher */}
                                <Box sx={{ flex: 2, padding: '20px 30px', marginRight: 2, backgroundColor: '#db5656', borderRadius: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
                                    <Typography variant="body1" sx={{ fontWeight: 'bold', color: 'white' }}>
                                        M√£: {voucher.ma}
                                    </Typography>
                                    <Typography variant="body1" sx={{ color: 'white' }}>
                                        Gi·∫£m: {voucher.giaTriGiam < 100 ? `${voucher.giaTriGiam}${voucher.loaiPhieuGiamGia === 'Ph·∫ßn trƒÉm' ? '%' : ' VNƒê'}` : `${new Intl.NumberFormat().format(voucher.giaTriGiam)}${voucher.loaiPhieuGiamGia === 'Ph·∫ßn trƒÉm' ? '%' : ' VNƒê'}`}
                                    </Typography>
                                </Box>

                                {/* C√°c th√¥ng tin c√≤n l·∫°i */}
                                <Box sx={{ flex: 3, paddingRight: 2 }}>
                                    <Typography variant="body1" sx={{ fontWeight: 'bold' }}>{voucher.tenPhieuGiamGia}</Typography>
                                    <Typography variant="body1" sx={{ fontSize: '0.875rem' }}>{voucher.moTa}</Typography>
                                    <Typography variant="body1" sx={{ fontSize: '0.875rem' }}>{voucher.trangThai}</Typography>
                                    <Typography variant="body1" sx={{ fontSize: '0.875rem' }}>S·ªë ti·ªÅn t·ªëi thi·ªÉu: {voucher.soTienToiThieu}</Typography>
                                    <Typography variant="body1" sx={{ fontSize: '0.875rem' }}>S·ªë l∆∞·ª£ng: {voucher.soLuong}</Typography>
                                    {renderAdditionalAmountMessage(voucher)} {/* Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu thi·∫øu ti·ªÅn */}
                                </Box>

                                {/* N√∫t s·ª≠ d·ª•ng */}
                                <Box sx={{ flex: 1, textAlign: 'center' }}>
                                    <Button
                                        variant="contained"
                                        sx={{ backgroundColor: '#d32f2f' }}
                                        onClick={() => handleUseVoucher(voucher.ma)}
                                        disabled={!isVoucherValid(voucher)} // Disable button n·∫øu kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán
                                    >
                                        S·ª≠ d·ª•ng
                                    </Button>
                                </Box>
                            </Box>
                        ))}
                    </Box>
                </DialogContent>
            </Dialog>
            {/* Modal confirm x√°c nh·∫≠n ƒë·∫∑t h√†ng */}
            <Dialog open={openConfirmDatHang} onClose={() => setOpenConfirmDatHang(false)}>
                <DialogTitle>X√°c nh·∫≠n ƒë∆°n h√†ng</DialogTitle>
                <DialogContent>
                    <DialogContentText>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√°c nh·∫≠n ƒë·∫∑t h√†ng kh√¥ng?</DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setOpenConfirmDatHang(false)} color="secondary">
                        H·ªßy
                    </Button>
                    <Button onClick={xacNhanDatHang} color="primary" variant="contained">
                        X√°c nh·∫≠n
                    </Button>
                </DialogActions>
            </Dialog>

            {/* G·ªçi Modal */}
            <Modal open={openDC} onClose={handleCloseDC}>
                <Box
                    sx={{
                        position: "absolute",
                        top: "50%",
                        left: "50%",
                        transform: "translate(-50%, -50%)",
                        width: 800,
                        bgcolor: "white",
                        boxShadow: 24,
                        p: 3,
                        borderRadius: 2,
                    }}
                >
                    {/* Header */}
                    <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Typography variant="h6">Danh s√°ch ƒê·ªãa ch·ªâ</Typography>
                        <IconButton onClick={handleCloseDC}>
                            <CloseIcon />
                        </IconButton>
                    </Box>

                    {/* Table hi·ªÉn th·ªã danh s√°ch ƒë·ªãa ch·ªâ */}
                    <TableContainer component={Paper} sx={{ mt: 2, maxHeight: 400 }}>
                        <Table stickyHeader>
                            <TableHead>
                                <TableRow>
                                    <TableCell sx={{ fontWeight: "bold" }}>STT</TableCell>
                                    <TableCell sx={{ fontWeight: "bold" }}>T√™n ng∆∞·ªùi nh·∫≠n</TableCell>
                                    <TableCell sx={{ fontWeight: "bold" }}>S·ªë ƒëi·ªán tho·∫°i</TableCell>
                                    <TableCell sx={{ fontWeight: "bold" }}>ƒê·ªãa ch·ªâ</TableCell>
                                    <TableCell sx={{ fontWeight: "bold" }}>Thao t√°c</TableCell>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {addresses.map((address, index) => (
                                    <TableRow key={address.id}>
                                        <TableCell>{index + 1}</TableCell>
                                        <TableCell>{tenNguoiNhan}</TableCell>
                                        <TableCell>{sdtNguoiNhan}</TableCell>
                                        <TableCell>
                                            {`${address.soNha}, ${address.duong}, ${address.xa}, ${address.huyen}, ${address.thanhPho}`}
                                        </TableCell>
                                        <TableCell>
                                            <Button variant="outlined" color="primary" onClick={() => handleSelectAddress(address)}>
                                                CH·ªåN
                                            </Button>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>

                        </Table>
                    </TableContainer>

                    {/* N√∫t th√™m ƒë·ªãa ch·ªâ */}
                    <Button variant="contained" color="warning" sx={{ mt: 2 }} fullWidth onClick={handleClickOpen}>
                        TH√äM ƒê·ªäA CH·ªà
                    </Button>
                </Box>
            </Modal>

            {/* Modal cho ch·ªçn ƒë·ªãa ch·ªâ */}
            <Dialog open={openChonDC} onClose={handleCloseChonDC}>
                <DialogTitle>Ch·ªçn ƒë·ªãa ch·ªâ</DialogTitle>
                <DialogContent>
                    {/* Th√†nh ph·ªë */}
                    <FormControl fullWidth margin="normal">
                        <InputLabel id="city-label" size="small">
                            T·ªânh/Th√†nh ph·ªë
                        </InputLabel>
                        <Select
                            labelId="city-label"
                            value={newCity} // S·ª≠ d·ª•ng state cho modal l√† 'city'
                            label="T·ªânh/Th√†nh ph·ªë"
                            onChange={handleCityChangeModal}
                            size="small" // √Åp d·ª•ng size nh·ªè cho Select
                        >
                            {newCities.map(
                                (
                                    newCity // S·ª≠ d·ª•ng citiess (d·ªØ li·ªáu cho modal)
                                ) => (
                                    <MenuItem key={newCity.ProvinceID} value={newCity.Name}>
                                        {newCity.Name}
                                    </MenuItem>
                                )
                            )}
                        </Select>
                    </FormControl>

                    {/* Qu·∫≠n/Huy·ªán */}
                    <FormControl fullWidth margin="normal">
                        <InputLabel id="district-label" size="small">
                            Qu·∫≠n/Huy·ªán
                        </InputLabel>
                        <Select
                            labelId="district-label"
                            value={newDistrict} // S·ª≠ d·ª•ng state cho modal l√† 'district'
                            label="Qu·∫≠n/Huy·ªán"
                            onChange={handleDistrictChangeModal}
                            disabled={!newCities} // Disable n·∫øu ch∆∞a ch·ªçn th√†nh ph·ªë
                            size="small" // √Åp d·ª•ng size nh·ªè cho Select
                        >
                            {newDistricts.map(
                                (
                                    newDistrict // S·ª≠ d·ª•ng districtss (d·ªØ li·ªáu cho modal)
                                ) => (
                                    <MenuItem
                                        key={newDistrict.DistrictID}
                                        value={newDistrict.DistrictName}
                                    >
                                        {newDistrict.DistrictName}
                                    </MenuItem>
                                )
                            )}
                        </Select>
                    </FormControl>

                    {/* X√£/Ph∆∞·ªùng */}
                    <FormControl fullWidth margin="normal">
                        <InputLabel id="ward-label" size="small">
                            X√£/Ph∆∞·ªùng
                        </InputLabel>
                        <Select
                            labelId="ward-label"
                            value={newWard} // S·ª≠ d·ª•ng state cho modal l√† 'ward'
                            label="X√£/Ph∆∞·ªùng"
                            onChange={handleWardChangeModal}
                            disabled={!newDistrict} // Disable n·∫øu ch∆∞a ch·ªçn qu·∫≠n/huy·ªán
                            size="small" // √Åp d·ª•ng size nh·ªè cho Select
                        >
                            {newWards.map(
                                (
                                    newWard // S·ª≠ d·ª•ng wardss (d·ªØ li·ªáu cho modal)
                                ) => (
                                    <MenuItem key={newWard.WardID} value={newWard.WardName}>
                                        {newWard.WardName}
                                    </MenuItem>
                                )
                            )}
                        </Select>
                    </FormControl>

                    {/* ƒê·ªãa ch·ªâ c·ª• th·ªÉ */}
                    <FormControl fullWidth margin="normal">
                        <TextField
                            id="detailed-address"
                            label="ƒê·ªãa ch·ªâ c·ª• th·ªÉ"
                            variant="outlined"
                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ"
                            fullWidth
                            size="small" // √Åp d·ª•ng size nh·ªè cho TextField
                        />
                    </FormControl>

                    {/* M√¥ t·∫£ */}
                    <FormControl fullWidth margin="normal">
                        <TextField
                            id="description"
                            label="M√¥ t·∫£"
                            variant="outlined"
                            placeholder="Nh·∫≠p m√¥ t·∫£"
                            fullWidth
                            size="small" // √Åp d·ª•ng size nh·ªè cho TextField
                        />
                    </FormControl>

                </DialogContent>
                <DialogActions>
                    <Button onClick={handleCloseChonDC} color="primary">
                        H·ªßy
                    </Button>
                    <Button onClick={handleSaveAddress} color="primary">
                        L∆∞u
                    </Button>
                </DialogActions>
            </Dialog>
            <ToastContainer />
        </Container>
    );

};

export default ThanhToan;
