import React, {useRef, useEffect, useState } from "react";
import axios from "axios"; // Import axios
import {
  Box, Table, TableBody,
  TableCell, TableContainer, TableHead, TableRow, Typography, Paper, Grid, Divider, IconButton, TextField,Chip

} from "@mui/material";

import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useParams, useNavigate } from "react-router-dom";
import "react-toastify/dist/ReactToastify.css";
import { toast } from "react-toastify";
import { ToastContainer } from "react-toastify";


const HoaDonChiTietClient = () => {
  //Khai b√°o useState
  const scrollRef = useRef(null);
  const navigate = useNavigate();
  const { id } = useParams(); //L·∫•y id khi truy·ªÅn ƒë·∫øn trang n√†y b·∫±ng useParams
  const [hoaDon, setHoaDon] = useState({}); //Bi·∫øn l∆∞u d·ªØ li·ªáu h√≥a ƒë∆°n
  const [imageIndexes, setImageIndexes] = useState({});//Bi·∫øn l∆∞u gi√° tr·ªã key(idSPCT t·ª´ HDCT) c√πng index h√¨nh ·∫£nh hi·ªán t·∫°i 

  //Th√¥ng b√°o th√†nh c√¥ng
  const showSuccessToast = (message) => {
    toast.success(message, {
      position: "top-right",
      autoClose: 2000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      theme: "colored",
      style: {
        backgroundColor: "#1976D2", // M√†u n·ªÅn xanh ƒë·∫πp h∆°n
        color: "white", // Ch·ªØ tr·∫Øng n·ªïi b·∫≠t
        fontSize: "14px", // Nh·ªè h∆°n m·ªôt ch√∫t
        fontWeight: "500",
        borderRadius: "8px",
      }
    });
  };
  const showErrorToast = (message) => {
    toast.error(message, {
      position: "top-right",
      autoClose: 2000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      theme: "colored",
      style: {
        backgroundColor: "#D32F2F", // M√†u ƒë·ªè c·∫£nh b√°o
        color: "white", // Ch·ªØ tr·∫Øng n·ªïi b·∫≠t
        fontSize: "14px", // Nh·ªè h∆°n m·ªôt ch√∫t
        fontWeight: "500",
        borderRadius: "8px",
      }
    });
  };
  //List tr·∫°ng th√°i h√≥a ƒë∆°n
  const steps = hoaDon.loaiHoaDon === "T·∫°i qu·∫ßy"
    ? (hoaDon.sdtNguoiNhanHang === null
      ? ["Ch·ªù th√™m s·∫£n ph·∫©m", "Ch·ªù thanh to√°n", "ƒê√£ thanh to√°n", "Ho√†n th√†nh"]
      : ["Ch·ªù th√™m s·∫£n ph·∫©m", "Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n", "Ch·ªù giao h√†ng", "ƒêang v·∫≠n chuy·ªÉn", "ƒê√£ giao h√†ng", "Ch·ªù thanh to√°n", "ƒê√£ thanh to√°n", "Ho√†n th√†nh"]
    )
    : ["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n", "Ch·ªù giao h√†ng", "ƒêang v·∫≠n chuy·ªÉn", "ƒê√£ giao h√†ng", "Ch·ªù thanh to√°n", "ƒê√£ thanh to√°n", "Ho√†n th√†nh"];

  const handleWheel = (event) => {
    if (scrollRef.current) {
      event.preventDefault();
      scrollRef.current.scrollLeft += event.deltaY;
    }
  };

  //H√†m tr·∫£ v·ªÅ CSS khung theo tr·∫°ng th√°i
  const getStatusStyles = (status) => {
    switch (status) {
      case "Ch·ªù x√°c nh·∫≠n":
        return { backgroundColor: "#FFF9C4", color: "#9E9D24" }; // V√†ng nh·∫°t
      case "ƒê√£ x√°c nh·∫≠n":
        return { backgroundColor: "#C8E6C9", color: "#388E3C" }; // Xanh l√° nh·∫°t
      case "Ch·ªù giao h√†ng":
        return { backgroundColor: "#FFE0B2", color: "#E65100" }; // Cam nh·∫°t
      case "ƒêang v·∫≠n chuy·ªÉn":
        return { backgroundColor: "#BBDEFB", color: "#1976D2" }; // Xanh d∆∞∆°ng nh·∫°t
      case "ƒê√£ giao h√†ng":
        return { backgroundColor: "#DCEDC8", color: "#689F38" }; // Xanh l√° nh·∫°t h∆°n
      case "ƒê√£ thanh to√°n":
        return { backgroundColor: "#E1BEE7", color: "#8E24AA" }; // T√≠m nh·∫°t
      case "Ch·ªù thanh to√°n":
        return { backgroundColor: "#FFCCBC", color: "#D84315" }; // ƒê·ªè cam nh·∫°t
      case "Ho√†n th√†nh":
        return { backgroundColor: "#CFD8DC", color: "#455A64" }; // X√°m nh·∫°t
      case "ƒê√£ h·ªßy":
        return { backgroundColor: "#FFCDD2", color: "#C62828" }; // ƒê·ªè nh·∫°t
      default:
        return { backgroundColor: "#E3F2FD", color: "#000" }; // M√†u m·∫∑c ƒë·ªãnh (xanh si√™u nh·∫π)
    }
  };
  //H√†m g·ªçi api l·∫•y h√≥a ƒë∆°n
  const fetchHoaDon = async () => {
    try {
      const response = await axios.get(`http://localhost:8080/hoa-don-chi-tiet/${id}`);
      setHoaDon(response.data); // D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ response.data
    } catch (err) {
      showErrorToast("Kh√¥ng load ƒë∆∞·ª£c h√≥a ƒë∆°n");
    }
  };

  //L·∫•y d·ªØ li·ªáu h√≥a ƒë∆°n
  useEffect(() => {
    fetchHoaDon();
  }, []);

  //H√†m load ·∫£nh
  useEffect(() => {
    if (!hoaDon || !hoaDon.listDanhSachSanPham) return; // Ki·ªÉm tra n·∫øu hoaDon ch∆∞a load ho·∫∑c hoaDon.listDanhSachSanPham r·ªóng
    const interval = setInterval(() => {
      setImageIndexes((prevIndexes) => {
        const newIndexes = { ...prevIndexes };
        hoaDon.listDanhSachSanPham.forEach((product) => {
          if (product.hinhAnh.length > 1) {
            newIndexes[product.id] = (prevIndexes[product.id] + 1) % product.hinhAnh.length || 0;
          }
        });
        return newIndexes;
      });
    }, 3000); // Chuy·ªÉn ·∫£nh sau m·ªói 3 gi√¢y
    return () => clearInterval(interval);
  }, [hoaDon?.listDanhSachSanPham]);

  const currentStep = hoaDon ? steps.indexOf(hoaDon.trangThai) : -1; //Bi·∫øn l∆∞u index tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa h√≥a ƒë∆°n trong steps
  const isCanceled = hoaDon?.trangThai === "ƒê√£ h·ªßy";//Bi·∫øn true false c√≥ ph·∫£i h√≥a ƒë∆°n tr·∫°ng th√°i H·ªßy kh√¥ng
  return (
    <div>
      <Box display="flex" alignItems="center" mb={3}>
        <IconButton onClick={() => navigate(`/donMua`)} sx={{ marginRight: 2 }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h5" sx={{ fontWeight: "bold" }}>
          ƒê∆°n mua{" "}
          <Box component="span" sx={{ color: "#b0b0b0", fontWeight: "bold" }} >
            / Chi ti·∫øt h√≥a ƒë∆°n {hoaDon.ma}
          </Box>
        </Typography>
      </Box>
      {/* Tr·∫°ng th√°i h√≥a ƒë∆°n */}
      <Box sx={{ textAlign: "center", maxWidth: "100%", mb: 3, display: "flex", justifyContent: "center" }}>
        {hoaDon.trangThai === "ƒê√£ h·ªßy" ? (
          <Typography
            variant="h6"
            sx={{
              fontWeight: 600,
              color: "error.dark",
              bgcolor: "#FFEBEE",
              p: 2,
              borderRadius: 2,
              boxShadow: "0px 2px 8px rgba(211, 47, 47, 0.2)",
              display: "inline-block",
              maxWidth: "90%",
            }}
          >
            üö´ H√≥a ƒë∆°n n√†y ƒë√£ b·ªã h·ªßy!
          </Typography>
        ) : (
          <>
            <Box sx={{ display: "flex", justifyContent: "center", overflow: "hidden" }}>
              <Box
                ref={scrollRef}
                onWheel={handleWheel}
                sx={{
                  display: "flex",
                  overflowX: "auto",
                  scrollbarWidth: "thin",
                  "&::-webkit-scrollbar": { height: 4 },
                  "&::-webkit-scrollbar-thumb": { bgcolor: "grey.400", borderRadius: 2 },
                  width: "100%",
                  maxWidth: "1200px", // Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa ƒë·ªÉ kh√¥ng k√©o c·∫£ trang
                  p: 1,
                  whiteSpace: "nowrap",
                  alignItems: "center",
                }}
              >

                {steps.map((step, index) => {
                  const isPast = index < currentStep;
                  const isCurrent = index === currentStep;
                  const isSameStatus = step === steps[currentStep]; // Ki·ªÉm tra tr√πng tr·∫°ng th√°i                
                  return (
                    <Box key={index} sx={{ display: "flex", alignItems: "center" }}>
                      <Chip
                        label={step}
                        sx={{
                          px: 2,
                          py: 1,
                          borderRadius: 2,
                          fontWeight: isCurrent ? 700 : 500,
                          bgcolor: isSameStatus ? "#3498EA" : isPast ? "success.main" : isCurrent ? "warning.main" : "grey.300",
                          color: "white",
                          transition: "0.3s",
                          boxShadow: isCurrent ? "0px 2px 8px rgba(78, 172, 235, 0.16)" : "none",
                        }}
                      />
                      {index < steps.length - 1 && (
                        <Box
                          sx={{
                            width: 30,
                            height: 3,
                            bgcolor: isPast ? "success.light" : "grey.400",
                            mx: 1,
                            transition: "0.3s",
                          }}
                        />
                      )}
                    </Box>
                  );
                })}
              </Box>
            </Box>
          </>)}
      </Box>
      {/* Th√¥ng tin h√≥a ƒë∆°n */}
      <Paper sx={{ p: 3, mb: 3, borderRadius: 2 }}>
        <Grid container spacing={2}>
          {/* C·ªôt 1: Th√¥ng tin h√≥a ƒë∆°n */}
          <Grid item xs={12} md={6}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: "bold", color: "#1976D2" }}>
              Th√¥ng tin h√≥a ƒë∆°n {hoaDon.ma}
            </Typography>

            <Typography>
              <b>Tr·∫°ng th√°i:</b>{" "}
              <Box
                component="span"
                sx={{
                  ...getStatusStyles(hoaDon.trangThai),
                  borderRadius: "8px",
                  padding: "4px 10px",
                  fontWeight: "normal",
                  display: "inline-block",
                  ml: 1,
                }}
              >
                {hoaDon.trangThai}
              </Box>
            </Typography>



            <Typography>
              <b>Ghi ch√∫:</b> {hoaDon.ghiChu}
            </Typography>
          </Grid>

          {/* C·ªôt 2: Th√¥ng tin nh·∫≠n h√†ng */}
          {hoaDon.sdtNguoiNhanHang && (
            <Grid item xs={12} md={6}>
              <Typography variant="h7" gutterBottom sx={{ fontWeight: "bold", color: "#E65100" }}>
                Th√¥ng tin nh·∫≠n h√†ng
              </Typography>
              <Typography>
                <b>T√™n ng∆∞·ªùi nh·∫≠n:</b> {hoaDon.tenNguoiNhanHang}
              </Typography>
              <Typography>
                <b>SDT ng∆∞·ªùi nh·∫≠n:</b> {hoaDon.sdtNguoiNhanHang}
              </Typography>
              <Typography>
                <b>Email ng∆∞·ªùi nh·∫≠n:</b> {hoaDon.emailNguoiNhanHang}
              </Typography>
              <Typography>
                <b>ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n:</b> {hoaDon.diaChiNguoiNhanHang}
              </Typography>
            </Grid>
          )
          }

          {/* D√≤ng m·ªõi: Th√¥ng tin kh√°ch h√†ng */}
          <Grid item xs={12}>
            <Typography variant="h7" gutterBottom sx={{ fontWeight: "bold", color: "#388E3C", mt: 2 }}>
              Th√¥ng tin kh√°ch h√†ng
            </Typography>
            <Typography>
              <Box sx={{
                backgroundColor: "#D1E8FF",
                color: "#0D47A1",
                borderRadius: "8px",
                padding: "4px 10px",
                fontWeight: "normal",
                display: "inline-block",

              }}>
                {hoaDon.maKhachHang ?
                  `${hoaDon.maKhachHang} - ${hoaDon.tenKhachHang} - ${hoaDon.sdtKhachHang}` : "Kh√°ch v√£ng lai"}
              </Box>

            </Typography>
          </Grid>
        </Grid>
      </Paper>

      <TableContainer component={Paper} sx={{ mt: 3, borderRadius: 2, overflow: "hidden" }}>
        <Box sx={{ display: "flex", alignItems: "center", justifyContent: "space-between", px: 2, py: 1 }}>
          <Typography
            variant="h6"
            sx={{ fontWeight: "bold", textTransform: "uppercase", fontSize: "1.2rem", flex: 1, textAlign: "center" }}
          >
            Danh s√°ch s·∫£n ph·∫©m
          </Typography>

        </Box>

        <Table sx={{ border: "1px solid #ddd" }}>
          <TableHead>
            <TableRow>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>STT</TableCell>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>H√¨nh ·∫£nh</TableCell>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>S·∫£n ph·∫©m</TableCell>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>S·ªë l∆∞·ª£ng</TableCell>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>ƒê∆°n gi√°</TableCell>
              <TableCell align="center" sx={{ fontWeight: "bold", fontSize: "0.95rem" }}>S·ªë ti·ªÅn</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {hoaDon?.listDanhSachSanPham?.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} align="center" sx={{ py: 2, fontStyle: "italic", color: "gray" }}>
                  Kh√¥ng c√≥ d·ªØ li·ªáu
                </TableCell>
              </TableRow>
            ) : (
              hoaDon?.listDanhSachSanPham?.map((product, index) => {
                const images = product.hinhAnh || [];
                const currentIndex = imageIndexes[product.id] ?? 0;
                return (
                  <TableRow
                    key={index}
                    sx={{
                      backgroundColor: product.trangThai !== "Ho·∫°t ƒë·ªông" ? "#FFEBEE" : "inherit", // M√†u ƒë·ªè nh·∫°t n·∫øu kh√¥ng ho·∫°t ƒë·ªông
                      "&:hover": { backgroundColor: product.trangThai !== "Ho·∫°t ƒë·ªông" ? "#FFCDD2" : "#f5f5f5" } // M√†u hover kh√°c nhau
                    }}
                  >
                    <TableCell align="center">{index + 1}</TableCell>
                    <TableCell align="center">
                      {images.length > 0 && (
                        <img
                          src={images[currentIndex]}
                          alt={`·∫¢nh ${currentIndex + 1}`}
                          style={{
                            width: "70px",
                            height: "70px",
                            objectFit: "cover",
                            borderRadius: "10px",
                            transition: "transform 0.3s ease-in-out",
                            boxShadow: "0px 0px 8px rgba(0,0,0,0.15)",
                          }}
                          onMouseOver={(e) => (e.target.style.transform = "scale(1.1)")}
                          onMouseOut={(e) => (e.target.style.transform = "scale(1)")}
                        />
                      )}
                    </TableCell>
                    <TableCell align="center">
                      <Typography>{product.tenMauSize}</Typography>
                      <Typography sx={{ color: "gray", fontSize: "0.85rem" }}>{product.maSanPhamChiTiet}</Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Box display="flex" justifyContent="center" alignItems="center">

                        <TextField
                          value={product.soLuong}
                          type="number"
                          inputProps={{ min: 1, style: { textAlign: "center" }, step: 1 }}
                          size="small"
                          sx={{
                            width: "60px",
                            "& .MuiInputBase-input": {
                              textAlign: "center",
                              padding: "5px 0",
                              backgroundColor: "transparent"
                            },
                            "& .MuiOutlinedInput-root": {
                              border: "none",
                              "& .MuiOutlinedInput-notchedOutline": { border: "none" },
                              "&:hover .MuiOutlinedInput-notchedOutline": { border: "none" },
                              "&.Mui-focused .MuiOutlinedInput-notchedOutline": { border: "none" }
                            },
                            "& input[type=number]::-webkit-outer-spin-button, & input[type=number]::-webkit-inner-spin-button": {
                              WebkitAppearance: "none",
                              margin: 0
                            }
                          }}
                        />

                      </Box>
                    </TableCell>
                    <TableCell align="center">{product.donGia?.toLocaleString()} VNƒê</TableCell>
                    <TableCell align="center">{product.soTien?.toLocaleString()} VNƒê</TableCell>

                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <Box sx={{ p: 2, borderRadius: 2 }}>
        {/* T·ªïng ti·ªÅn h√†ng */}
        <Box display="flex" justifyContent="space-between" mb={1}>
          <Typography variant="body1" fontWeight={500}>T·ªïng ti·ªÅn h√†ng:</Typography>
          <Typography variant="body1" fontWeight={500}>{hoaDon.tongTienSanPham?.toLocaleString()} VNƒê</Typography>
        </Box>

        {/* Ph√≠ ship */}
        {(hoaDon?.phiVanChuyen ?? 0) > 0 && (
          <Box display="flex" justifyContent="space-between" mb={1}>
            <Typography variant="body1" fontWeight={500}>Ph√≠ v·∫≠n chuy·ªÉn:</Typography>
            <Typography variant="body1" fontWeight={500}>{(hoaDon?.phiVanChuyen ?? 0).toLocaleString()} ƒë</Typography>
          </Box>
        )}

        {/* M√£ voucher */}
        {hoaDon.maVoucher && (
          <Box display="flex" justifyContent="space-between" mb={2}>
            <Typography variant="body1" fontWeight={500}>M√£ gi·∫£m gi√°:</Typography>
            <Typography variant="body1" fontWeight={500} color="error">
              {hoaDon.maVoucher} - {(hoaDon.tongTienSanPham + (hoaDon?.phiVanChuyen ?? 0) - (hoaDon?.tongTienThanhToan ?? 0)).toLocaleString()} ƒë
            </Typography>
          </Box>
        )}

        <Divider sx={{ my: 2 }} />

        {/* T·ªïng ti·ªÅn thanh to√°n */}
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6" fontWeight="bold" color="primary">
            T·ªïng thanh to√°n:
          </Typography>
          <Typography
            variant="h5"
            fontWeight="bold"
            sx={{
              color: "#D32F2F",
              // textShadow: "0px 0px 5px rgba(211, 47, 47, 0.5)",
            }}
          >
            {(hoaDon.tongTienThanhToan ?? 0).toLocaleString()} VNƒê
          </Typography>
        </Box>
      </Box>
      <ToastContainer /> {/* Quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã toast */}
    </div>
  );
};

export default HoaDonChiTietClient;
